{"ast":null,"code":"import jwtParse from \"jwt-decode\";\nimport config from \"./configServer.json\";\nexport const authentication = async (url, content) => {\n  const r = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: JSON.stringify(content)\n  });\n  const json = await r.json();\n  return createUserWithAuth(json);\n};\nexport const getCategories = async () => {\n  const r = await fetchWithToken(config.endPoint + \"/category\", {\n    method: \"GET\"\n  });\n  return r.json();\n};\nexport const getProducts = async () => {\n  const r = await fetchWithToken(config.endPoint + \"/product\", {\n    method: \"GET\"\n  });\n  return r.json();\n};\nexport const deleteProduct = async productId => {\n  const r = await fetchWithToken(config.endPoint + `/product/${productId}`, {\n    method: \"DELETE\"\n  });\n\n  if (!r.ok) {\n    const message = \"Error with Status Code: \" + r.status;\n    throw new Error(message);\n  }\n};\n\nconst fetchWithToken = (url, options) => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token === null) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  const {\n    headers = {},\n    ...restOfOptions\n  } = options || {};\n  return fetch(url, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      ...headers\n    },\n    ...restOfOptions\n  });\n};\n\nconst createUserWithAuth = data => {\n  const jwtData = jwtParse(data.refreshToken);\n  const user = {\n    email: jwtData.email,\n    name: jwtData.name,\n    isAdmin: jwtData.isAdmin\n  };\n  localStorage.setItem(\"token\", data.refreshToken);\n  return user;\n};","map":{"version":3,"sources":["D:/VSCODE/diplom/client/src/apiProvider.ts"],"names":["jwtParse","config","authentication","url","content","r","fetch","method","headers","body","JSON","stringify","json","createUserWithAuth","getCategories","fetchWithToken","endPoint","getProducts","deleteProduct","productId","ok","message","status","Error","options","token","localStorage","getItem","restOfOptions","Authorization","data","jwtData","refreshToken","user","email","name","isAdmin","setItem"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAUA,OAAO,MAAMC,cAAc,GAAG,OAC5BC,GAD4B,EAE5BC,OAF4B,KAGT;AACnB,QAAMC,CAAC,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AACzBI,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFgB;AAKzBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;AALmB,GAAN,CAArB;AAOA,QAAMQ,IAAI,GAAG,MAAMP,CAAC,CAACO,IAAF,EAAnB;AAEA,SAAOC,kBAAkB,CAACD,IAAD,CAAzB;AACD,CAdM;AAgBP,OAAO,MAAME,aAAa,GAAG,YAAkC;AAC7D,QAAMT,CAAC,GAAG,MAAMU,cAAc,CAACd,MAAM,CAACe,QAAP,GAAkB,WAAnB,EAAgC;AAC5DT,IAAAA,MAAM,EAAE;AADoD,GAAhC,CAA9B;AAGA,SAAOF,CAAC,CAACO,IAAF,EAAP;AACD,CALM;AAOP,OAAO,MAAMK,WAAW,GAAG,YAAiC;AAC1D,QAAMZ,CAAC,GAAG,MAAMU,cAAc,CAACd,MAAM,CAACe,QAAP,GAAkB,UAAnB,EAA+B;AAC3DT,IAAAA,MAAM,EAAE;AADmD,GAA/B,CAA9B;AAGA,SAAOF,CAAC,CAACO,IAAF,EAAP;AACD,CALM;AAOP,OAAO,MAAMM,aAAa,GAAG,MAAOC,SAAP,IAA6B;AACxD,QAAMd,CAAC,GAAG,MAAMU,cAAc,CAACd,MAAM,CAACe,QAAP,GAAmB,YAAWG,SAAU,EAAzC,EAA4C;AACxEZ,IAAAA,MAAM,EAAE;AADgE,GAA5C,CAA9B;;AAIA,MAAI,CAACF,CAAC,CAACe,EAAP,EAAW;AACT,UAAMC,OAAO,GAAG,6BAA6BhB,CAAC,CAACiB,MAA/C;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;AACF,CATM;;AAWP,MAAMN,cAAc,GAAG,CAACZ,GAAD,EAAcqB,OAAd,KAAoD;AACzE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAM,IAAIF,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,QAAM;AAAEf,IAAAA,OAAO,GAAG,EAAZ;AAAgB,OAAGoB;AAAnB,MAAqCJ,OAAO,IAAI,EAAtD;AAEA,SAAOlB,KAAK,CAACH,GAAD,EAAM;AAChBK,IAAAA,OAAO,EAAE;AACPqB,MAAAA,aAAa,EAAG,UAASJ,KAAM,EADxB;AAEP,SAAGjB;AAFI,KADO;AAKhB,OAAGoB;AALa,GAAN,CAAZ;AAOD,CAdD;;AAgBA,MAAMf,kBAAkB,GAAIiB,IAAD,IAA2B;AACpD,QAAMC,OAAc,GAAG/B,QAAQ,CAAC8B,IAAI,CAACE,YAAN,CAA/B;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,KAAK,EAAEH,OAAO,CAACG,KADJ;AAEXC,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFH;AAGXC,IAAAA,OAAO,EAAEL,OAAO,CAACK;AAHN,GAAb;AAKAV,EAAAA,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8BP,IAAI,CAACE,YAAnC;AAEA,SAAOC,IAAP;AACD,CAVD","sourcesContent":["import jwtParse from \"jwt-decode\";\r\nimport config from \"./configServer.json\";\r\nimport {\r\n  ICategory,\r\n  ILoginData,\r\n  IProduct,\r\n  IRegisterData,\r\n  IUser,\r\n  UserData,\r\n} from \"./types\";\r\n\r\nexport const authentication = async (\r\n  url: string,\r\n  content: IRegisterData | ILoginData\r\n): Promise<IUser> => {\r\n  const r = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify(content),\r\n  });\r\n  const json = await r.json();\r\n\r\n  return createUserWithAuth(json);\r\n};\r\n\r\nexport const getCategories = async (): Promise<ICategory[]> => {\r\n  const r = await fetchWithToken(config.endPoint + \"/category\", {\r\n    method: \"GET\",\r\n  });\r\n  return r.json();\r\n};\r\n\r\nexport const getProducts = async (): Promise<IProduct[]> => {\r\n  const r = await fetchWithToken(config.endPoint + \"/product\", {\r\n    method: \"GET\",\r\n  });\r\n  return r.json();\r\n};\r\n\r\nexport const deleteProduct = async (productId: string) => {\r\n  const r = await fetchWithToken(config.endPoint + `/product/${productId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  if (!r.ok) {\r\n    const message = \"Error with Status Code: \" + r.status;\r\n    throw new Error(message);\r\n  }\r\n};\r\n\r\nconst fetchWithToken = (url: string, options?: RequestInit | undefined) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token === null) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n  const { headers = {}, ...restOfOptions } = options || {};\r\n\r\n  return fetch(url, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      ...headers,\r\n    },\r\n    ...restOfOptions,\r\n  });\r\n};\r\n\r\nconst createUserWithAuth = (data: UserData): IUser => {\r\n  const jwtData: IUser = jwtParse(data.refreshToken);\r\n  const user = {\r\n    email: jwtData.email,\r\n    name: jwtData.name,\r\n    isAdmin: jwtData.isAdmin,\r\n  };\r\n  localStorage.setItem(\"token\", data.refreshToken);\r\n\r\n  return user;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}