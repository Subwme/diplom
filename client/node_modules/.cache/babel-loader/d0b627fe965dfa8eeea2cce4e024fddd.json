{"ast":null,"code":"import { getProductsInBasketIdListFromLocalStorage } from './../../utils';\nimport { getUserFromLocalStorage } from \"../../utils\";\nimport { ActionTypes } from \"../types\";\nconst initialState = {\n  user: getUserFromLocalStorage(),\n  products: [],\n  categories: [],\n  sortBy: null,\n  searchText: \"\",\n  selectedCategoryName: null,\n  productInBasketIdList: getProductsInBasketIdListFromLocalStorage()\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.SetUser:\n      return { ...state,\n        user: action.payload\n      };\n\n    case ActionTypes.SetProducts:\n      return { ...state,\n        products: action.payload\n      };\n\n    case ActionTypes.SetCategories:\n      return { ...state,\n        categories: action.payload\n      };\n\n    case ActionTypes.SetSortByAsc:\n      return { ...state,\n        sortBy: \"asc\"\n      };\n\n    case ActionTypes.SetSortByDesc:\n      return { ...state,\n        sortBy: \"desc\"\n      };\n\n    case ActionTypes.SetSearchText:\n      return { ...state,\n        searchText: action.payload\n      };\n\n    case ActionTypes.SetSelectedCategory:\n      return { ...state,\n        selectedCategoryName: action.payload\n      };\n\n    case ActionTypes.AddProductToBasket:\n      {\n        const updatedProductInBasketIdList = [...state.productInBasketIdList, action.payload]; // store subscribe\n\n        localStorage.setItem(\"productInBasketIdList\", JSON.stringify(updatedProductInBasketIdList));\n        return { ...state,\n          productInBasketIdList: updatedProductInBasketIdList\n        };\n      }\n\n    case ActionTypes.RemoveProductFromBasket:\n      {\n        const index = state.productInBasketIdList.indexOf(action.payload);\n\n        if (index === -1) {\n          return state;\n        }\n\n        const updatedProductInBasketIdList = [...state.productInBasketIdList.slice(0, index), ...state.productInBasketIdList.slice(index + 1)]; // store subscribe\n\n        localStorage.setItem(\"productInBasketIdList\", JSON.stringify(updatedProductInBasketIdList));\n        return { ...state,\n          productInBasketIdList: updatedProductInBasketIdList\n        };\n      }\n\n    case ActionTypes.RemovedProductFromAdmin:\n      {\n        const updatedProductFromAdminList = state.products.filter(p => {\n          return p._id !== action.payload;\n        });\n        return { ...state,\n          products: updatedProductFromAdminList\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const setUserAction = payload => ({\n  type: ActionTypes.SetUser,\n  payload\n});\nexport const setProductsAction = payload => ({\n  type: ActionTypes.SetProducts,\n  payload\n});\nexport const setCategoriesAction = payload => ({\n  type: ActionTypes.SetCategories,\n  payload\n});\nexport const setSortByAscAction = () => ({\n  type: ActionTypes.SetSortByAsc\n});\nexport const setSortByDescAction = () => ({\n  type: ActionTypes.SetSortByDesc\n});\nexport const setSearchTextAction = payload => ({\n  type: ActionTypes.SetSearchText,\n  payload\n});\nexport const setSelectedCategoryAction = payload => ({\n  type: ActionTypes.SetSelectedCategory,\n  payload\n});\nexport const addProductToBasketAction = payload => ({\n  type: ActionTypes.AddProductToBasket,\n  payload\n});\nexport const removeProductFromBasketAction = payload => ({\n  type: ActionTypes.RemoveProductFromBasket,\n  payload\n});\nexport const removeProductFromAdminAction = payload => {};","map":{"version":3,"sources":["D:/VSCODE/diplom/client/src/store/reducers/reducer.ts"],"names":["getProductsInBasketIdListFromLocalStorage","getUserFromLocalStorage","ActionTypes","initialState","user","products","categories","sortBy","searchText","selectedCategoryName","productInBasketIdList","reducer","state","action","type","SetUser","payload","SetProducts","SetCategories","SetSortByAsc","SetSortByDesc","SetSearchText","SetSelectedCategory","AddProductToBasket","updatedProductInBasketIdList","localStorage","setItem","JSON","stringify","RemoveProductFromBasket","index","indexOf","slice","RemovedProductFromAdmin","updatedProductFromAdminList","filter","p","_id","setUserAction","setProductsAction","setCategoriesAction","setSortByAscAction","setSortByDescAction","setSearchTextAction","setSelectedCategoryAction","addProductToBasketAction","removeProductFromBasketAction","removeProductFromAdminAction"],"mappings":"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","sourcesContent":["import { getProductsInBasketIdListFromLocalStorage } from './../../utils';\r\nimport { getUserFromLocalStorage } from \"../../utils\";\r\nimport { ICategory, IProduct, IUser } from \"./../../types\";\r\nimport {\r\n  IState,\r\n  ActionTypes,\r\n  SetUser,\r\n  Action,\r\n  SetProducts,\r\n  SetCategories,\r\n  SetSortByAsc,\r\n  SetSortByDesc,\r\n  SetSearchText,\r\n  SetSelectedCategory,\r\n  RemoveProductFromBasket,\r\n  AddProductToBasket,\r\n} from \"../types\";\r\n\r\nconst initialState: IState = {\r\n  user: getUserFromLocalStorage(),\r\n  products: [],\r\n  categories: [],\r\n  sortBy: null,\r\n  searchText: \"\",\r\n  selectedCategoryName: null,\r\n  productInBasketIdList: getProductsInBasketIdListFromLocalStorage(),\r\n};\r\n\r\nexport const reducer = (state = initialState, action: Action): IState => {\r\n  switch (action.type) {\r\n    case ActionTypes.SetUser:\r\n      return { ...state, user: action.payload };\r\n    case ActionTypes.SetProducts:\r\n      return { ...state, products: action.payload };\r\n    case ActionTypes.SetCategories:\r\n      return { ...state, categories: action.payload };\r\n    case ActionTypes.SetSortByAsc:\r\n      return { ...state, sortBy: \"asc\" };\r\n    case ActionTypes.SetSortByDesc:\r\n      return { ...state, sortBy: \"desc\" };\r\n    case ActionTypes.SetSearchText:\r\n      return { ...state, searchText: action.payload };\r\n    case ActionTypes.SetSelectedCategory:\r\n      return { ...state, selectedCategoryName: action.payload };\r\n    case ActionTypes.AddProductToBasket: {\r\n      const updatedProductInBasketIdList = [\r\n        ...state.productInBasketIdList,\r\n        action.payload,\r\n      ];\r\n      // store subscribe\r\n      localStorage.setItem(\r\n        \"productInBasketIdList\",\r\n        JSON.stringify(updatedProductInBasketIdList)\r\n      );\r\n      return { ...state, productInBasketIdList: updatedProductInBasketIdList };\r\n    }\r\n    case ActionTypes.RemoveProductFromBasket: {\r\n      const index = state.productInBasketIdList.indexOf(action.payload);\r\n      if (index === -1) {\r\n        return state;\r\n      }\r\n      const updatedProductInBasketIdList = [\r\n        ...state.productInBasketIdList.slice(0, index),\r\n        ...state.productInBasketIdList.slice(index + 1),\r\n      ];\r\n      // store subscribe\r\n      localStorage.setItem(\r\n        \"productInBasketIdList\",\r\n        JSON.stringify(updatedProductInBasketIdList)\r\n      );\r\n      return { ...state, productInBasketIdList: updatedProductInBasketIdList };\r\n    }\r\n    case ActionTypes.RemovedProductFromAdmin: {\r\n      const updatedProductFromAdminList = state.products.filter((p)=> {\r\n        return p._id !== action.payload\r\n      })\r\n      return {...state, products: updatedProductFromAdminList}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUserAction = (payload: IUser): SetUser => ({\r\n  type: ActionTypes.SetUser,\r\n  payload,\r\n});\r\n\r\nexport const setProductsAction = (payload: IProduct[]): SetProducts => ({\r\n  type: ActionTypes.SetProducts,\r\n  payload,\r\n});\r\n\r\nexport const setCategoriesAction = (payload: ICategory[]): SetCategories => ({\r\n  type: ActionTypes.SetCategories,\r\n  payload,\r\n});\r\n\r\nexport const setSortByAscAction = (): SetSortByAsc => ({\r\n  type: ActionTypes.SetSortByAsc,\r\n});\r\n\r\nexport const setSortByDescAction = (): SetSortByDesc => ({\r\n  type: ActionTypes.SetSortByDesc,\r\n});\r\n\r\nexport const setSearchTextAction = (payload: string): SetSearchText => ({\r\n  type: ActionTypes.SetSearchText,\r\n  payload,\r\n});\r\n\r\nexport const setSelectedCategoryAction = (\r\n  payload: string\r\n): SetSelectedCategory => ({\r\n  type: ActionTypes.SetSelectedCategory,\r\n  payload,\r\n});\r\n\r\nexport const addProductToBasketAction = (\r\n  payload: string\r\n): AddProductToBasket => ({\r\n  type: ActionTypes.AddProductToBasket,\r\n  payload,\r\n});\r\n\r\nexport const removeProductFromBasketAction = (\r\n  payload: string\r\n): RemoveProductFromBasket => ({\r\n  type: ActionTypes.RemoveProductFromBasket,\r\n  payload,\r\n});\r\n\r\nexport const removeProductFromAdminAction = (payload: string): RemovedProductFromAdmin => {\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}