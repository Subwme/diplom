{"ast":null,"code":"import jwtParse from \"jwt-decode\";\nimport config from \"./configServer.json\";\nexport const signUp = async content => {\n  const r = await fetch(config.endPoint + \"/auth/sign-up\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: JSON.stringify(data)\n  });\n  const json = await r.json(); // получаем jwt и добываем из него User(убрать лишнее)\n\n  const jwtData = jwtParse(json.refreshToken);\n  const user = {\n    email: jwtData.email,\n    name: jwtData.name,\n    isAdmin: jwtData.isAdmin\n  };\n  return user;\n};\nexport const getCategories = async () => {\n  const r = await fetchWithToken(config.endPoint + \"/category\", {\n    method: \"GET\"\n  });\n  return r.json();\n};\nexport const getProducts = async () => {\n  const r = await fetchWithToken(config.endPoint + \"/product\", {\n    method: \"GET\",\n    headers: {}\n  });\n  return r.json();\n};\n\nconst fetchWithToken = (url, options) => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token === null) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  const {\n    headers = {},\n    ...restOfOptions\n  } = options || {};\n  return fetch(url, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      ...headers\n    },\n    ...restOfOptions\n  });\n};","map":{"version":3,"sources":["D:/VSCODE/diplom/client/src/apiProvider.ts"],"names":["jwtParse","config","signUp","content","r","fetch","endPoint","method","headers","body","JSON","stringify","data","json","jwtData","refreshToken","user","email","name","isAdmin","getCategories","fetchWithToken","getProducts","url","options","token","localStorage","getItem","Error","restOfOptions","Authorization"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAGA,OAAO,MAAMC,MAAM,GAAG,MAAOC,OAAP,IAAkC;AACtD,QAAMC,CAAC,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAACK,QAAP,GAAkB,eAAnB,EAAoC;AACvDC,IAAAA,MAAM,EAAE,MAD+C;AAEvDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF8C;AAKvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,IAAf;AALiD,GAApC,CAArB;AAOA,QAAMC,IAAI,GAAG,MAAMT,CAAC,CAACS,IAAF,EAAnB,CARsD,CAStD;;AACA,QAAMC,OAAc,GAAGd,QAAQ,CAACa,IAAI,CAACE,YAAN,CAA/B;AAEA,QAAMC,IAAI,GAAG;AACXC,IAAAA,KAAK,EAAEH,OAAO,CAACG,KADJ;AAEXC,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFH;AAGXC,IAAAA,OAAO,EAAEL,OAAO,CAACK;AAHN,GAAb;AAKA,SAAOH,IAAP;AACD,CAlBM;AAoBP,OAAO,MAAMI,aAAa,GAAG,YAAkC;AAC7D,QAAMhB,CAAC,GAAG,MAAMiB,cAAc,CAACpB,MAAM,CAACK,QAAP,GAAkB,WAAnB,EAAgC;AAC5DC,IAAAA,MAAM,EAAE;AADoD,GAAhC,CAA9B;AAGA,SAAOH,CAAC,CAACS,IAAF,EAAP;AACD,CALM;AAOP,OAAO,MAAMS,WAAW,GAAG,YAAiC;AAC1D,QAAMlB,CAAC,GAAG,MAAMiB,cAAc,CAACpB,MAAM,CAACK,QAAP,GAAkB,UAAnB,EAA+B;AAC3DC,IAAAA,MAAM,EAAE,KADmD;AAE3DC,IAAAA,OAAO,EAAE;AAFkD,GAA/B,CAA9B;AAIA,SAAOJ,CAAC,CAACS,IAAF,EAAP;AACD,CANM;;AAQP,MAAMQ,cAAc,GAAG,CAACE,GAAD,EAAcC,OAAd,KAAoD;AACzE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,QAAM;AAAEpB,IAAAA,OAAO,GAAG,EAAZ;AAAgB,OAAGqB;AAAnB,MAAqCL,OAAO,IAAI,EAAtD;AAEA,SAAOnB,KAAK,CAACkB,GAAD,EAAM;AAChBf,IAAAA,OAAO,EAAE;AACPsB,MAAAA,aAAa,EAAG,UAASL,KAAM,EADxB;AAEP,SAAGjB;AAFI,KADO;AAKhB,OAAGqB;AALa,GAAN,CAAZ;AAOD,CAdD","sourcesContent":["import jwtParse from \"jwt-decode\";\r\nimport config from \"./configServer.json\";\r\nimport { ICategory, IProduct, IRegisterData, IUser } from \"./types\";\r\n\r\nexport const signUp = async (content: IRegisterData) => {\r\n  const r = await fetch(config.endPoint + \"/auth/sign-up\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  const json = await r.json();\r\n  // получаем jwt и добываем из него User(убрать лишнее)\r\n  const jwtData: IUser = jwtParse(json.refreshToken);\r\n\r\n  const user = {\r\n    email: jwtData.email,\r\n    name: jwtData.name,\r\n    isAdmin: jwtData.isAdmin,\r\n  };\r\n  return user;\r\n};\r\n\r\nexport const getCategories = async (): Promise<ICategory[]> => {\r\n  const r = await fetchWithToken(config.endPoint + \"/category\", {\r\n    method: \"GET\",\r\n  });\r\n  return r.json();\r\n};\r\n\r\nexport const getProducts = async (): Promise<IProduct[]> => {\r\n  const r = await fetchWithToken(config.endPoint + \"/product\", {\r\n    method: \"GET\",\r\n    headers: {},\r\n  });\r\n  return r.json();\r\n};\r\n\r\nconst fetchWithToken = (url: string, options?: RequestInit | undefined) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token === null) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n  const { headers = {}, ...restOfOptions } = options || {};\r\n\r\n  return fetch(url, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      ...headers,\r\n    },\r\n    ...restOfOptions,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}