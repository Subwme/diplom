{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCODE\\\\diplom\\\\client\\\\src\\\\registerForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport config from \"./configServer.json\";\nimport jwtParse from \"jwt-decode\";\nimport { useAppDispatch, useAppSelector } from \"./store\";\nimport { setUserAction } from \"./store/reducers/reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Product = props => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Product:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Product;\n\nconst RegisterForm = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const user = useAppSelector(state => state.user);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors,\n      isValid\n    }\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  const submitFunc = async data => {\n    // запрос sign-up / sign-in\n    try {\n      const response = await fetch(config.endPoint + \"/auth/sign-up\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        body: JSON.stringify(data)\n      });\n      const json = await response.json(); // получаем jwt и добываем из него User(убрать лишнее)\n\n      const jwtData = jwtParse(json.refreshToken);\n      const user = {\n        email: jwtData.email,\n        name: jwtData.name,\n        isAdmin: jwtData.isAdmin\n      };\n      console.log(user); // сохраняем jwt в localstorage\n\n      localStorage.setItem(\"token\", json.refreshToken);\n      dispatch(setUserAction(user));\n      reset();\n    } catch (error) {\n      // todo отрефачить все это гавно ^^\n      console.log(error);\n      alert(error);\n    } // replce главная страница ?\n\n  };\n\n  if (user !== null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \", user.name, \" \\u0437\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitFunc),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: [\"\\u0418\\u043C\\u044F\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u0418\\u043C\\u044F\",\n          ...register(\"name\", {\n            required: {\n              value: true,\n              message: \"Укажите ваше имя...\"\n            },\n            minLength: {\n              value: 3,\n              message: \"Минимальная длина имени 3 - символа\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.name && errors.name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: [\"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Email\",\n          ...register(\"email\", {\n            required: {\n              value: true,\n              message: \"Email адрес обязателен\"\n            },\n            pattern: {\n              value: /@/,\n              message: \"Email адрес должен содержать символ @\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.email && errors.email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: [\"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          ...register(\"password\", {\n            required: {\n              value: true,\n              message: \"Укажите пароль...\"\n            },\n            minLength: {\n              value: 8,\n              message: \"Минимальная длина пароля 8 - символов\"\n            } // pattern: {\n            //   value: /([A-Z])([0-9])+/g,\n            //   message: \"Пароль должен содержать хотябы одну заглавную букву\",\n            // },\n\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.password && errors.password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        disabled: !isValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegisterForm, \"YOluaBOuwmYZS7GoRLMC9CFxlxg=\", false, function () {\n  return [useAppDispatch, useAppSelector, useForm];\n});\n\n_c2 = RegisterForm;\nexport default RegisterForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Product\");\n$RefreshReg$(_c2, \"RegisterForm\");","map":{"version":3,"sources":["D:/VSCODE/diplom/client/src/registerForm.tsx"],"names":["React","useForm","config","jwtParse","useAppDispatch","useAppSelector","setUserAction","Product","props","RegisterForm","dispatch","user","state","register","handleSubmit","reset","formState","errors","isValid","mode","submitFunc","data","response","fetch","endPoint","method","headers","body","JSON","stringify","json","jwtData","refreshToken","email","name","isAdmin","console","log","localStorage","setItem","error","alert","required","value","message","minLength","pattern","password"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { IRegisterData, IUser } from \"./types\";\r\nimport config from \"./configServer.json\";\r\nimport jwtParse from \"jwt-decode\";\r\nimport { useAppDispatch, useAppSelector } from \"./store\";\r\nimport { setUserAction } from \"./store/reducers/reducer\";\r\n\r\ninterface ICategory {\r\n  name: string;\r\n}\r\n\r\ninterface IProduct {\r\n  name: string;\r\n  price: number;\r\n  amount: number;\r\n  description: string;\r\n  image: string;\r\n  category: ICategory;\r\n}\r\n\r\ninterface IProps {\r\n  product: IProduct;\r\n}\r\n\r\nconst Product = (props: IProps) => {\r\n\r\n  return(<h1>Product:</h1>)\r\n}\r\n\r\nconst RegisterForm = () => {\r\n  const dispatch = useAppDispatch();\r\n  const user = useAppSelector(state => state.user)\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isValid },\r\n  } = useForm<IRegisterData>({ mode: \"onChange\" });\r\n\r\n  const submitFunc = async (data: IRegisterData) => {\r\n    // запрос sign-up / sign-in\r\n    try {\r\n      const response = await fetch(config.endPoint + \"/auth/sign-up\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const json = await response.json();\r\n      // получаем jwt и добываем из него User(убрать лишнее)\r\n      const jwtData: IUser = jwtParse(json.refreshToken);\r\n\r\n      const user = {\r\n        email: jwtData.email,\r\n        name: jwtData.name,\r\n        isAdmin: jwtData.isAdmin,\r\n      };\r\n      console.log(user);\r\n\r\n      // сохраняем jwt в localstorage\r\n      localStorage.setItem(\"token\", json.refreshToken);\r\n      dispatch(setUserAction(user));\r\n      reset();\r\n    } catch (error) {\r\n      // todo отрефачить все это гавно ^^\r\n      console.log(error);\r\n      alert(error);\r\n    }\r\n\r\n    // replce главная страница ?\r\n  };\r\n\r\n  if(user !== null) {\r\n    return (<p>Пользователь {user.name} зарегистрирован</p>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Регистрация</h1>\r\n\r\n      <form onSubmit={handleSubmit(submitFunc)}>\r\n        <label className=\"label\">\r\n          Имя\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Имя\"\r\n            {...register(\"name\", {\r\n              required: { value: true, message: \"Укажите ваше имя...\" },\r\n              minLength: {\r\n                value: 3,\r\n                message: \"Минимальная длина имени 3 - символа\",\r\n              },\r\n            })}\r\n          />\r\n        </label>\r\n        <p className=\"error\">{errors.name && errors.name.message}</p>\r\n\r\n        <label className=\"label\">\r\n          Электронная почта\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            {...register(\"email\", {\r\n              required: { value: true, message: \"Email адрес обязателен\" },\r\n              pattern: {\r\n                value: /@/,\r\n                message: \"Email адрес должен содержать символ @\",\r\n              },\r\n            })}\r\n          />\r\n        </label>\r\n        <p className=\"error\">{errors.email && errors.email.message}</p>\r\n\r\n        <label className=\"label\">\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            {...register(\"password\", {\r\n              required: { value: true, message: \"Укажите пароль...\" },\r\n              minLength: {\r\n                value: 8,\r\n                message: \"Минимальная длина пароля 8 - символов\",\r\n              },\r\n              // pattern: {\r\n              //   value: /([A-Z])([0-9])+/g,\r\n              //   message: \"Пароль должен содержать хотябы одну заглавную букву\",\r\n              // },\r\n            })}\r\n          />\r\n        </label>\r\n        <p className=\"error\">{errors.password && errors.password.message}</p>\r\n        <input type=\"submit\" disabled={!isValid} />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}